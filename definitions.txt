; BOOLEANS AND BRANCHING
true = λx.λy.x
false = \f.\x.x   ; same as 0
and = λp.λq.p q p
or = λp.λq.p p q
not = λp.p false true
xor = \p.\q.p (not q) q
if = λb.λT.λF.((b T) F)

; NUMBER OPERATIONS
succ = \n.\f.\x.f (n f x)
pred = λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u)
+ = λm.λn.λf.λx.(m f) ((n f) x)
* = λn.λm.λf.λx.n (m f) x
- = λm.λn.(n pred) m
even? = λn.n not true
odd? = \x.not (even? x)
zero? = \n.n (\x.false) true
leq? = \m.\n.zero?(- m n)     ; "less than or equal to"
lt? = \a.\b.not (leq? b a)
gt? = \a.\b.not (leq? a b)
eq? = \m.\n.and (leq? m n) (leq? n m)
neq? = (not (eq? a b)) ; "not equal"
geq? = \a.\b.(leq? b a)


; GENERATING NUMBERS WITH RUN
0 = \f.\x.x    ; same as false
1 = run succ 0
2 = run succ 1
3 = run + 2 1
4 = run * 2 2
5 = (λf.(λx.(f (f (f (f (f x)))))))
7 = run succ (succ 5)
6 = run pred 7
10 = run succ (+ 3 6)
9 = run pred 10
8 = run - 10 2


; LINKED LISTS
cons = λx.λy.λf.f x y   ; makes a cons pair (x y)
car = λp.p true
cdr = λp.p false
null = \x.true
null? = λp.p (λx.λy.false) ; true if null, false if a pair, UNDEFINED otherwise


; Y COMBINATOR
Y = λf. (λx. f(x x)) (λx. f(x x))

; FUN FUNCTIONS THAT USE Y
factorial = Y \f.\n.(if (zero? n) 1 (* n (f (- n 1))))
; divpair returns a cons box of the quotient and remainder of a division
divpair = Y (λg.λq.λa.λb. lt? a b (cons q a) (g (succ q) (- a b) b)) 0
/ = λa.\b. car (divpair a b)
mod = λa.\b. cdr (divpair a b)

; Now we can make statements like
; run factorial 3
; run + 2 (factorial 3)
; run (/ (* 3 6) 2)



run (if (and true false) WRONG-ANSWER Correct-Answer!)